package br.edu.ifsp.dsw3.trabalho.empresa.api_controller;

import br.edu.ifsp.dsw3.trabalho.empresa.model.dao.VulnerabilityDAO;
import br.edu.ifsp.dsw3.trabalho.empresa.model.domain.Vulnerability;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/vulnerabilities")
public class VulnerabilityRestController {

    @Autowired
    private VulnerabilityDAO vulnerabilityDAO;

    // Buscar todas as vulnerabilidades
    @GetMapping
    public ResponseEntity<List<Vulnerability>> getAllVulnerabilities() {
        List<Vulnerability> vulnerabilities = vulnerabilityDAO.findAll();
        return ResponseEntity.ok(vulnerabilities);
    }

    // Buscar vulnerabilidade por ID
    @GetMapping("/{id}")
    public ResponseEntity<Vulnerability> getVulnerabilityById(@PathVariable Long id) {
        Optional<Vulnerability> vulnerability = vulnerabilityDAO.findById(id);
        return vulnerability.map(ResponseEntity::ok)
                            .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());
    }

    // Criar uma nova vulnerabilidade
    @PostMapping
    public ResponseEntity<Vulnerability> createVulnerability(@RequestBody Vulnerability vulnerability) {
        Vulnerability savedVulnerability = vulnerabilityDAO.save(vulnerability);
        return ResponseEntity.status(HttpStatus.CREATED).body(savedVulnerability);
    }

    // Atualizar uma vulnerabilidade existente
    @PutMapping("/{id}")
    public ResponseEntity<Vulnerability> updateVulnerability(@PathVariable Long id, @RequestBody Vulnerability updatedVulnerability) {
        Optional<Vulnerability> optionalVulnerability = vulnerabilityDAO.findById(id);
        if (optionalVulnerability.isPresent()) {
            Vulnerability vulnerability = optionalVulnerability.get();
            // Atualizar os campos necess√°rios
            vulnerability.setName(updatedVulnerability.getName());
            vulnerability.setDescription(updatedVulnerability.getDescription());

            Vulnerability savedVulnerability = vulnerabilityDAO.save(vulnerability);
            return ResponseEntity.ok(savedVulnerability);
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }
    }

    // Deletar uma vulnerabilidade
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteVulnerability(@PathVariable Long id) {
        Optional<Vulnerability> vulnerability = vulnerabilityDAO.findById(id);
        if (vulnerability.isPresent()) {
            vulnerabilityDAO.deleteById(id);
            return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }
    }
}

